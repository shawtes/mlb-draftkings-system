{"ast":null,"code":"class WebSocketConnection {\n  constructor(url) {\n    this.ws = null;\n    this.url = void 0;\n    this.listeners = new Map();\n    this.url = url;\n    this.connect();\n  }\n  connect() {\n    try {\n      this.ws = new WebSocket(this.url);\n      this.ws.onopen = () => {\n        console.log('WebSocket connected');\n      };\n      this.ws.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          this.emit(data.type, data);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n      this.ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        // Attempt to reconnect after 3 seconds\n        setTimeout(() => this.connect(), 3000);\n      };\n      this.ws.onerror = error => {\n        console.error('WebSocket error:', error);\n      };\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n    }\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n  on(eventType, callback) {\n    var _this$listeners$get;\n    if (!this.listeners.has(eventType)) {\n      this.listeners.set(eventType, []);\n    }\n    (_this$listeners$get = this.listeners.get(eventType)) === null || _this$listeners$get === void 0 ? void 0 : _this$listeners$get.push(callback);\n  }\n  emit(eventType, data) {\n    const callbacks = this.listeners.get(eventType);\n    if (callbacks) {\n      callbacks.forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error('Error in WebSocket callback:', error);\n        }\n      });\n    }\n  }\n  send(data) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(data));\n    } else {\n      console.warn('WebSocket is not connected');\n    }\n  }\n  close() {\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n}\nexport default WebSocketConnection;","map":{"version":3,"names":["WebSocketConnection","constructor","url","ws","listeners","Map","connect","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","emit","type","error","onclose","setTimeout","onerror","disconnect","close","on","eventType","callback","_this$listeners$get","has","set","get","push","callbacks","forEach","send","readyState","OPEN","stringify","warn"],"sources":["c:/Users/smtes/Downloads/coinbase_ml_trader/web_optimizer/client/src/services/WebSocketConnection.ts"],"sourcesContent":["class WebSocketConnection {\n  private ws: WebSocket | null = null;\n  private url: string;\n  private listeners: Map<string, Function[]> = new Map();\n\n  constructor(url: string) {\n    this.url = url;\n    this.connect();\n  }\n\n  private connect() {\n    try {\n      this.ws = new WebSocket(this.url);\n      \n      this.ws.onopen = () => {\n        console.log('WebSocket connected');\n      };\n\n      this.ws.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          this.emit(data.type, data);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      this.ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        // Attempt to reconnect after 3 seconds\n        setTimeout(() => this.connect(), 3000);\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n    }\n  }\n\n  public disconnect() {\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n\n  public on(eventType: string, callback: Function) {\n    if (!this.listeners.has(eventType)) {\n      this.listeners.set(eventType, []);\n    }\n    this.listeners.get(eventType)?.push(callback);\n  }\n\n  private emit(eventType: string, data: any) {\n    const callbacks = this.listeners.get(eventType);\n    if (callbacks) {\n      callbacks.forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error('Error in WebSocket callback:', error);\n        }\n      });\n    }\n  }\n\n  public send(data: any) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(data));\n    } else {\n      console.warn('WebSocket is not connected');\n    }\n  }\n\n  public close() {\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n}\n\nexport default WebSocketConnection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}