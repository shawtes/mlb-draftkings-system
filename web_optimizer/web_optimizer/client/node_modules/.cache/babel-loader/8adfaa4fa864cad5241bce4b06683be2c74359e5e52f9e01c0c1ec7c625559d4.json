{"ast":null,"code":"class WebSocketConnection{constructor(url){this.ws=null;this.url=void 0;this.listeners=new Map();this.url=url;this.connect();}connect(){try{this.ws=new WebSocket(this.url);this.ws.onopen=()=>{console.log('WebSocket connected');};this.ws.onmessage=event=>{try{const data=JSON.parse(event.data);this.emit(data.type,data);}catch(error){console.error('Error parsing WebSocket message:',error);}};this.ws.onclose=()=>{console.log('WebSocket disconnected');// Attempt to reconnect after 3 seconds\nsetTimeout(()=>this.connect(),3000);};this.ws.onerror=error=>{console.error('WebSocket error:',error);};}catch(error){console.error('Failed to create WebSocket connection:',error);}}disconnect(){if(this.ws){this.ws.close();}}on(eventType,callback){var _this$listeners$get;if(!this.listeners.has(eventType)){this.listeners.set(eventType,[]);}(_this$listeners$get=this.listeners.get(eventType))===null||_this$listeners$get===void 0?void 0:_this$listeners$get.push(callback);}emit(eventType,data){const callbacks=this.listeners.get(eventType);if(callbacks){callbacks.forEach(callback=>{try{callback(data);}catch(error){console.error('Error in WebSocket callback:',error);}});}}send(data){if(this.ws&&this.ws.readyState===WebSocket.OPEN){this.ws.send(JSON.stringify(data));}else{console.warn('WebSocket is not connected');}}close(){if(this.ws){this.ws.close();}}}export default WebSocketConnection;","map":{"version":3,"names":["WebSocketConnection","constructor","url","ws","listeners","Map","connect","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","emit","type","error","onclose","setTimeout","onerror","disconnect","close","on","eventType","callback","_this$listeners$get","has","set","get","push","callbacks","forEach","send","readyState","OPEN","stringify","warn"],"sources":["C:/Users/smtes/Downloads/coinbase_ml_trader/web_optimizer/client/src/services/WebSocketConnection.ts"],"sourcesContent":["class WebSocketConnection {\n  private ws: WebSocket | null = null;\n  private url: string;\n  private listeners: Map<string, Function[]> = new Map();\n\n  constructor(url: string) {\n    this.url = url;\n    this.connect();\n  }\n\n  private connect() {\n    try {\n      this.ws = new WebSocket(this.url);\n      \n      this.ws.onopen = () => {\n        console.log('WebSocket connected');\n      };\n\n      this.ws.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          this.emit(data.type, data);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      this.ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        // Attempt to reconnect after 3 seconds\n        setTimeout(() => this.connect(), 3000);\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n    }\n  }\n\n  public disconnect() {\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n\n  public on(eventType: string, callback: Function) {\n    if (!this.listeners.has(eventType)) {\n      this.listeners.set(eventType, []);\n    }\n    this.listeners.get(eventType)?.push(callback);\n  }\n\n  private emit(eventType: string, data: any) {\n    const callbacks = this.listeners.get(eventType);\n    if (callbacks) {\n      callbacks.forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error('Error in WebSocket callback:', error);\n        }\n      });\n    }\n  }\n\n  public send(data: any) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(data));\n    } else {\n      console.warn('WebSocket is not connected');\n    }\n  }\n\n  public close() {\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n}\n\nexport default WebSocketConnection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}